type: edu
files:
- name: src/de/nordakademie/guessmynumber/IPlayer.java
  visible: true
  text: |
    package de.nordakademie.guessmynumber;

    public interface IPlayer extends IChooser, IGuesser {


    }
  learner_created: false
- name: src/de/nordakademie/guessmynumber/IChooser.java
  visible: true
  text: |
    package de.nordakademie.guessmynumber;

    public interface IChooser {
        /**
         * Ausdenken einer neuen Zahl
         * @return die zu ratende Zahl
         */
        int nextNumberToGuess();

        /**
         * Nach jedem Rateversuch erhalten wir Informationen über das Raten.
         * @param guessOfGuesser
         */
        void receiveGuessOfGuesser(int guessOfGuesser);
    }
  learner_created: false
- name: src/de/nordakademie/guessmynumber/IGuesser.java
  visible: true
  text: |
    package de.nordakademie.guessmynumber;

    public interface IGuesser {

        /**
         *   Der Rater rät eine Zahl.
         * @return die geratene Zahl
         */
        int guessNumber();

        /**
         * Der Rater wird nach dem Aufruf von guessNumber über das Ergebnis seiner geratenen Zahl informiert
         * @param result
         *     verwendet die Konstanten GUESS_CORRECT, GUESS_TO_SMALL und GUESS_TO_LARGE
         */
        void receiveResultOfGuess(int result);
    }
  learner_created: false
- name: src/de/nordakademie/guessmynumber/IPayOffRule.java
  visible: true
  text: "package de.nordakademie.guessmynumber;\n\nimport java.util.List;\n\npublic\
    \ interface IPayOffRule {\n\tint computePayOff(List<Integer> resultList);\n}\n"
  learner_created: false
- name: src/de/nordakademie/guessmynumber/HumanVsComputer.java
  visible: true
  text: "package de.nordakademie.guessmynumber;\n\n\nimport de.nordakademie.guessmynumber.payoff.PayPerGuess;\n\
    import de.nordakademie.guessmynumber.player.ConstantChooser;\nimport de.nordakademie.guessmynumber.player.HumanGuesser;\n\
    \npublic class HumanVsComputer {\n\tpublic static void main(String[] args) {\n\
    \t\tIPayOffRule payOffRule = new PayPerGuess();\n\t\tGuessMyNumber g = new GuessMyNumber(new\
    \ ConstantChooser(), new HumanGuesser(), payOffRule);\n\t\t\n\t\tSystem.out.println(\"\
    Gewinn von StupidGuesser beläuft sich auf \"+g.playRound()+\" Taler.\");\n\t}\n\
    }\n"
  learner_created: false
- name: src/de/nordakademie/guessmynumber/ComputerVsComputer.java
  visible: true
  text: "package de.nordakademie.guessmynumber;\n\n\nimport de.nordakademie.guessmynumber.payoff.PayPerGuess;\n\
    import de.nordakademie.guessmynumber.player.ConstantChooser;\nimport de.nordakademie.guessmynumber.player.RandomGuesser;\n\
    \n\npublic class ComputerVsComputer {\n\t//Diese Methode ist eine Kopie der main\
    \ Methode aus HumanVsComputer.\n\t//Rater und Rätselsteller sind jetzt Computer.\n\
    \n\tpublic static void main(String[] args) {\n\t\tIPayOffRule register = new PayPerGuess();\n\
    \t\tGuessMyNumber g = new GuessMyNumber(new ConstantChooser(), new RandomGuesser(),\
    \ register);\n\t\t\n\t\tSystem.out.println(\"Gewinn von StupidGuesser beläuft\
    \ sich auf \"+g.playRound()+\" Taler.\");\n\t}\n}\n"
  learner_created: false
- name: src/de/nordakademie/guessmynumber/ComputerVsHuman.java
  visible: true
  text: "package de.nordakademie.guessmynumber;\n\n\nimport de.nordakademie.guessmynumber.payoff.PayPerGuess;\n\
    import de.nordakademie.guessmynumber.player.HumanChooser;\nimport de.nordakademie.guessmynumber.player.RandomGuesser;\n\
    \npublic class ComputerVsHuman {\n\t//Diese Methode ist eine Kopie der main Methode\
    \ aus HumanVsComputer.\n\t//Die Klassen für Rater und Rätselsteller sind jetzt\
    \ vertauscht.\n\tpublic static void main(String[] args) {\n\t\tIPayOffRule register\
    \ = new PayPerGuess();\n\t\tGuessMyNumber g = new GuessMyNumber(new HumanChooser(),\
    \ new RandomGuesser(), register);\n\t\t\n\t\tSystem.out.println(\"Gewinn von StupidGuesser\
    \ beläuft sich auf \"+g.playRound()+\" Taler.\");\n\t}\n}\n"
  learner_created: false
- name: src/de/nordakademie/guessmynumber/HumanVsComputer1.java
  visible: true
  text: "package de.nordakademie.guessmynumber;\n\n\nimport de.nordakademie.guessmynumber.payoff.PayPerGuess;\n\
    import de.nordakademie.guessmynumber.player.HumanChooser;\nimport de.nordakademie.guessmynumber.player.RandomGuesser;\n\
    \npublic class HumanVsComputer1 {\n\tpublic static void main(String[] args) {\n\
    \n\t\tIPayOffRule payOffRule = new PayPerGuess();\n\t\tGuessMyNumber g = new GuessMyNumber(new\
    \ HumanChooser(), new RandomGuesser(), payOffRule);\n\t\t\n\t\tSystem.out.println(\"\
    Gewinn von StupidGuesser beläuft sich auf \"+g.playRound()+\" Taler.\");\n\t}\n\
    }\n"
  learner_created: false
- name: src/de/nordakademie/guessmynumber/Computer2VsComputer1.java
  visible: true
  text: "package de.nordakademie.guessmynumber;\n\n\nimport de.nordakademie.guessmynumber.payoff.PayPerGuess;\n\
    import de.nordakademie.guessmynumber.player.RandomChooser;\nimport de.nordakademie.guessmynumber.player.SystematicGuesser;\n\
    \npublic class Computer2VsComputer1 {\n\tpublic static void main(String[] args)\
    \ {\n\t\tIPayOffRule payOffRule = new PayPerGuess();\n\t\tGuessMyNumber g = new\
    \ GuessMyNumber(new RandomChooser(), new SystematicGuesser(), payOffRule);\n\t\
    \t\n\t\tSystem.out.println(\"Gewinn von SystematicGuesser beläuft sich auf \"\
    +g.playRound()+\" Taler.\");\n\t}\n}\n"
  learner_created: false
- name: src/de/nordakademie/guessmynumber/Computer2VsHuman.java
  visible: true
  text: "package de.nordakademie.guessmynumber;\n\n\nimport de.nordakademie.guessmynumber.payoff.PayPerGuess;\n\
    import de.nordakademie.guessmynumber.player.HumanChooser;\nimport de.nordakademie.guessmynumber.player.RandomGuesser;\n\
    \npublic class Computer2VsHuman {\n\tpublic static void main(String[] args) {\n\
    \t\tIPayOffRule payOffRule = new PayPerGuess();\n\t\tGuessMyNumber g = new GuessMyNumber(new\
    \ HumanChooser(), new RandomGuesser(), payOffRule);\n\n\t\tSystem.out.println(\"\
    Gewinn von StupidGuesser beläuft sich auf \"+g.playRound()+\" Taler.\");\n\t}\n\
    }\n"
  learner_created: false
- name: src/de/nordakademie/guessmynumber/GuessMyNumber.java
  visible: true
  text: "package de.nordakademie.guessmynumber;\n\n\nimport java.util.Vector;\n\n\n\
    public class  GuessMyNumber {\n\n\tpublic static final int LOWER_LIMIT = 0;\n\t\
    public static final int UPPER_LIMIT = 99;\n\tpublic static final int GUESS_CORRECT\
    \ = 0;\n\tpublic static final int GUESS_TO_SMALL = -1;\n\tpublic static final\
    \ int GUESS_TO_LARGE = 1;\n\n\tprivate final IChooser chooser;\n\tprivate final\
    \ IGuesser guesser;\n\tprivate final IPayOffRule payOffRule;\n\n\tpublic GuessMyNumber(IChooser\
    \ chooser, IGuesser guesser, IPayOffRule rule) {\n\t\tsuper();\n\t\tthis.chooser\
    \ = chooser;\n\t\tthis.guesser = guesser;\n\t\tthis.payOffRule = rule;\n\t}\n\n\
    \t/**\n\t * Methode führt ein Spiel aus. Diese Methode kann mehrmals hintereinander\
    \ aufgerufen werden.\n\t * Die Spieler chooser und guesser sind selbst verantwortlich,\
    \ nach beenden des Spiels\n\t * Ihren internen Status zurück zu setzen.\n\t *\
    \ @return\n\t */\n\tpublic int playRound() {\n\t\t//Die resultList enthält die\
    \ zu ratende Zahl und alle Rateversuche.\n\t\t//Verwende die List Implementation\
    \ Vector, weil die Methoden firstElement und lastElement hat.\n\t\t//first Element\
    \ ist die zu ratende Zahl und lastElement die letzte geratene.\n\t\tVector<Integer>\
    \ resultList = new Vector<>();\n\t\tresultList.add(chooser.nextNumberToGuess());\n\
    \t\tint result;\n\t\tdo {\n\t\t\tresultList.add(guesser.guessNumber());\n\t\t\t\
    chooser.receiveGuessOfGuesser(resultList.lastElement());\n\t\t\tguesser.receiveResultOfGuess(result=evaluateGuess(resultList));\n\
    \t\t} while (result != GUESS_CORRECT);\n\t\treturn payOffRule.computePayOff(resultList);\n\
    \t}\n\n\tprivate int evaluateGuess(Vector<Integer> resultList) {\n\t\tif (resultList.firstElement()\
    \ < (int)resultList.lastElement())\n\t\t\treturn GUESS_TO_LARGE;\n\t\tif (resultList.firstElement()\
    \ > resultList.lastElement())\n\t\t\treturn GUESS_TO_SMALL;\n\t\treturn GUESS_CORRECT;\n\
    \t}\n}\n"
  learner_created: false
- name: src/de/nordakademie/guessmynumber/payoff/PayPerGuess.java
  visible: true
  text: "package de.nordakademie.guessmynumber.payoff;\n\n\n\nimport de.nordakademie.guessmynumber.GuessMyNumber;\n\
    import de.nordakademie.guessmynumber.IPayOffRule;\n\nimport java.util.List;\n\n\
    public class PayPerGuess implements IPayOffRule {\n\n\tprivate final static int\
    \ CRITICAL_NUMBER_OF_GUESSES = (int) Math.ceil((Math.log(GuessMyNumber.UPPER_LIMIT\
    \ - GuessMyNumber.LOWER_LIMIT + 1) / Math.log(2))); // floor(ld(UPPER-LOWER+1));\n\
    \n\n\t/*\n\tJeder Rateversuch reduziert den Gewinn um eine Einheit\n\t */\n\n\t\
    @Override\n\tpublic int computePayOff(List<Integer> resultList) {\n\t\treturn\
    \ CRITICAL_NUMBER_OF_GUESSES - resultList.size();\n\t}\n\n}\n"
  learner_created: false
- name: src/de/nordakademie/guessmynumber/payoff/PayPerSuccess.java
  visible: true
  text: "package de.nordakademie.guessmynumber.payoff;\n\n\n\nimport de.nordakademie.guessmynumber.GuessMyNumber;\n\
    import de.nordakademie.guessmynumber.IPayOffRule;\n\nimport java.util.List;\n\n\
    public class PayPerSuccess implements IPayOffRule {\n\tprivate final static int\
    \ CRITICAL_NUMBER_OF_GUESSES = (int) Math.ceil((Math.log(GuessMyNumber.UPPER_LIMIT\
    \ - GuessMyNumber.LOWER_LIMIT + 1) / Math.log(2))); // floor(ld(UPPER-LOWER+1));\n\
    \n\t/*\n\tWurde die kritische Anzahl von Rateversuchen überschritten? Dann verloren,\
    \ sonst gewonnen.\n\t */\n\t@Override\n\tpublic int computePayOff(List<Integer>\
    \ resultList) {\n\t\treturn  CRITICAL_NUMBER_OF_GUESSES > resultList.size()?1:-1;\n\
    \t}\n\n}\n"
  learner_created: false
- name: src/de/nordakademie/guessmynumber/RunTournament.java
  visible: true
  placeholders:
  - offset: 327
    length: 10
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 303
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      new Player(new ConstantChooser(),new RandomGuesser()),
                      new Player(new RandomChooser(),new RandomGuesser()),
                      new Player(new ConstantChooser(),new SystematicGuesser()),
                      new Player(new RandomChooser(),new SystematicGuesser())
  text: |
    package de.nordakademie.guessmynumber;

    import de.nordakademie.guessmynumber.payoff.PayPerGuess;
    import de.nordakademie.guessmynumber.player.*;

    public class RunTournament {
        public static void main(String[] args) {
            for (String result : new Tournament(200, new PayPerGuess(),
                    /* TODO */).run()) {
                System.out.println(result);
            }

        }
    }
  learner_created: false
- name: src/de/nordakademie/guessmynumber/player/ConstantChooser.java
  visible: true
  placeholders:
  - offset: 365
    length: 10
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 365
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: return 50;
  text: |-
    package de.nordakademie.guessmynumber.player;

    import de.nordakademie.guessmynumber.IChooser;

    public class ConstantChooser implements IChooser {
        public ConstantChooser() {
        }

        /**
         * 50 ist doch so gut wie jede andere Zahl.
         * Bloß nicht kreativ werden.
         * Wir sind doch keine Künstler.
         **/
        public int nextNumberToGuess() {
            /* TODO */
        }

        /**
         * Dumm ist der, der Dummes tut. Wir machen nichts, also auch nichts Dummes.
         * Die Ratestrategie des Anderen durchschauen wir sowieso nicht.
         */
        public void receiveGuessOfGuesser(int guessOfGuesser) {
        }
    }
  learner_created: false
- name: src/de/nordakademie/guessmynumber/player/HumanChooser.java
  visible: true
  placeholders:
  - offset: 284
    length: 10
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 284
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      System.out.println("Welche Zahl soll geraten werden? ");
              return s.nextInt();
  - offset: 376
    length: 10
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 376
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 'System.out.println("Geraten wurde: " + result);'
  text: |-
    package de.nordakademie.guessmynumber.player;

    import de.nordakademie.guessmynumber.IChooser;

    import java.util.Scanner;

    public class HumanChooser implements IChooser {
        private final Scanner s= new Scanner(System.in);


        @Override
        public int nextNumberToGuess() {
            /* TODO */
        }

        @Override
        public void receiveGuessOfGuesser(int result) {
            /* TODO */
        }
    }
  learner_created: false
- name: src/de/nordakademie/guessmynumber/player/HumanGuesser.java
  visible: true
  placeholders:
  - offset: 411
    length: 10
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 411
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
              System.out.println("Rate meine Zahl");
              return s.nextInt();
  - offset: 494
    length: 10
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 494
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
              if (result==GUESS_CORRECT){
                  System.out.println("Richtig!");
              } else {
                  if (result==GUESS_TO_LARGE){
                      System.out.println("zu groß");
                  } else {
                      System.out.println("zu klein");
                  }
              }
  text: |
    package de.nordakademie.guessmynumber.player;

    import de.nordakademie.guessmynumber.IGuesser;

    import java.util.Scanner;

    import static de.nordakademie.guessmynumber.GuessMyNumber.GUESS_CORRECT;
    import static de.nordakademie.guessmynumber.GuessMyNumber.GUESS_TO_LARGE;

    public class HumanGuesser implements IGuesser {
        private Scanner s = new Scanner(System.in);
        @Override
        public int guessNumber() {
    /* TODO */
        }

        @Override
        public void receiveResultOfGuess(int result) {
    /* TODO */
        }
    }
  learner_created: false
- name: src/de/nordakademie/guessmynumber/player/Player.java
  visible: true
  placeholders:
  - offset: 229
    length: 10
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 229
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
          private IChooser chooser;
          private IGuesser guesser;
  - offset: 369
    length: 10
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 369
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
          @Override
          public int guessNumber() {
              return guesser.guessNumber();
          }

          @Override
          public void receiveResultOfGuess(int result) {
             guesser.receiveResultOfGuess(result);
          }

          @Override
          public int nextNumberToGuess() {
              return chooser.nextNumberToGuess();
          }

          @Override
          public void receiveGuessOfGuesser(int guessOfGuesser) {
              chooser.receiveGuessOfGuesser(guessOfGuesser);
          }

          public String toString(){
              return "("+ chooser.getClass().getSimpleName()+","+guesser.getClass().getSimpleName()+")";
          }
  text: |
    package de.nordakademie.guessmynumber.player;

    import de.nordakademie.guessmynumber.IChooser;
    import de.nordakademie.guessmynumber.IGuesser;
    import de.nordakademie.guessmynumber.IPlayer;

    public class Player implements IPlayer {
    /* TODO */


        public Player(IChooser chooser, IGuesser guesser) {
            this.chooser = chooser;
            this.guesser = guesser;
        }

    /* TODO */
    }
  learner_created: false
- name: src/de/nordakademie/guessmynumber/player/RandomChooser.java
  visible: true
  placeholders:
  - offset: 402
    length: 10
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 402
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: return r.nextInt(UPPER_LIMIT-LOWER_LIMIT+1);
  text: |-
    package de.nordakademie.guessmynumber.player;

    import de.nordakademie.guessmynumber.IChooser;

    import java.util.Random;

    import static de.nordakademie.guessmynumber.GuessMyNumber.LOWER_LIMIT;
    import static de.nordakademie.guessmynumber.GuessMyNumber.UPPER_LIMIT;

    public class RandomChooser implements IChooser {
        private final Random r = new Random();

        public int nextNumberToGuess() {
            /* TODO */
        }

        /**
         * Dumm ist der, der Dummes tut. Wir machen nichts, also auch nichts Dummes.
         * Die Ratestrategie des Anderen durchschauen wir sowieso nicht.
         */
        public void receiveGuessOfGuesser(int guessOfGuesser) {
        }
    }
  learner_created: false
- name: src/de/nordakademie/guessmynumber/player/RandomGuesser.java
  visible: true
  placeholders:
  - offset: 396
    length: 10
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 396
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: return r.nextInt(UPPER_LIMIT-LOWER_LIMIT+1);
  text: |-
    package de.nordakademie.guessmynumber.player;

    import de.nordakademie.guessmynumber.IGuesser;

    import java.util.Random;

    import static de.nordakademie.guessmynumber.GuessMyNumber.LOWER_LIMIT;
    import static de.nordakademie.guessmynumber.GuessMyNumber.UPPER_LIMIT;

    public class RandomGuesser implements IGuesser {
        private final Random r = new Random();

        public int guessNumber() {
            /* TODO */
        }

        public void receiveResultOfGuess(int guessOfGuesser) {
        }
    }
  learner_created: false
- name: src/de/nordakademie/guessmynumber/player/SystematicGuesser.java
  visible: true
  placeholders:
  - offset: 470
    length: 10
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 470
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2
         public int guessNumber() {
              return (upper + lower) / 2;
          }
  - offset: 556
    length: 10
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 556
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
         public void receiveResultOfGuess(int result) {
              if (result == GuessMyNumber.GUESS_TO_LARGE) {
                  upper = (upper + lower) / 2 - 1;
              } else if (result == GuessMyNumber.GUESS_TO_SMALL) {
                  lower = (upper + lower) / 2 + 1;
              } else {
                  initBounds();
              }
          }
  text: |-
    package de.nordakademie.guessmynumber.player;

    import de.nordakademie.guessmynumber.GuessMyNumber;
    import de.nordakademie.guessmynumber.IGuesser;

    public class SystematicGuesser implements IGuesser {
        int upper;
        int lower;

        public SystematicGuesser() {
            initBounds();
        }

        void initBounds() {
            upper = GuessMyNumber.UPPER_LIMIT;
            lower = GuessMyNumber.LOWER_LIMIT;
        }

        /**
         * Mitte der oberen und unteren Grenze
         */
     /* TODO */
        /**
         * Anpassen der oberen/unteren Grenze an das Ergebnis
         */
     /* TODO */
    }
  learner_created: false
- name: src/de/nordakademie/guessmynumber/Tournament.java
  visible: true
  text: |
    package de.nordakademie.guessmynumber;

    import java.util.ArrayList;
    import java.util.List;

    public class Tournament {
        private final IPlayer[] players;
        private final int rounds;
        private final IPayOffRule rule;

        public Tournament(int rounds, IPayOffRule rule, IPlayer ... players) {
            this.players = players;
            this.rounds = rounds;
            this.rule=rule;
        }


        public List<String> run(){
            final List<String> results = new ArrayList<String>();
            for (int i = 0; i < players.length; i++) {
                for (int j = i+1; j < players.length; j++) {
                    results.add(
                            players[i]+" vs "+ players[j]+": "
                                    +matchPlayers(players[i],players[j]));
                }
            }
            return results;
        }

        /*
        Matches two players
         */
        private int matchPlayers(IPlayer player1, IPlayer player2){
            int result=0;
            for (int k = 0; k < rounds; k++) {
                result-=new GuessMyNumber(player1,player2,rule ).playRound();
                result+=new GuessMyNumber(player2,player1,rule ).playRound();
            }
            return result;
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: "\nimport org.junit.Test;\n\npublic class Tests {\n  @Test\n  public void\
    \ testSolution() {\n\n\n    \n  }\n}"
  learner_created: false
status: Unchecked
record: -1
